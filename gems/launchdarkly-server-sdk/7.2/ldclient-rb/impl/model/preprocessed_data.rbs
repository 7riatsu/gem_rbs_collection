module LaunchDarkly
  module Impl
    module Model
      #
      # Container for a precomputed result that includes a specific variation index and value, an
      # evaluation reason, and optionally an alternate evaluation reason that corresponds to the
      # "in experiment" state.
      #
      class EvalResultsForSingleVariation
        def initialize: (untyped value, untyped variation_index, untyped regular_reason, ?untyped? in_experiment_reason) -> void

        # @param in_experiment [Boolean] indicates whether we want the result to include
        #   "inExperiment: true" in the reason or not
        # @return [LaunchDarkly::EvaluationDetail]
        def get_result: (?bool in_experiment) -> untyped
      end

      #
      # Container for a set of precomputed results, one for each possible flag variation.
      #
      class EvalResultFactoryMultiVariations
        def initialize: (untyped variation_factories) -> void

        # @param index [Integer] the variation index
        # @param in_experiment [Boolean] indicates whether we want the result to include
        #   "inExperiment: true" in the reason or not
        # @return [LaunchDarkly::EvaluationDetail]
        def for_variation: (untyped index, untyped in_experiment) -> untyped
      end

      class Preprocessor
        # @param flag [LaunchDarkly::Impl::Model::FeatureFlag]
        # @param regular_reason [LaunchDarkly::EvaluationReason]
        # @param in_experiment_reason [LaunchDarkly::EvaluationReason]
        # @return [EvalResultFactoryMultiVariations]
        def self.precompute_multi_variation_results: (untyped flag, untyped regular_reason, untyped in_experiment_reason) -> untyped
      end
    end
  end
end
