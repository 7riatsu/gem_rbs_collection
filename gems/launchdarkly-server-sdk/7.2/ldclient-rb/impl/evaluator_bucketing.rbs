module LaunchDarkly
  module Impl
    # Encapsulates the logic for percentage rollouts.
    module EvaluatorBucketing
      # Applies either a fixed variation or a rollout for a rule (or the fallthrough rule).
      #
      # @param flag [Object] the feature flag
      # @param vr [LaunchDarkly::Impl::Model::VariationOrRollout] the variation/rollout properties
      # @param context [LaunchDarkly::LDContext] the context properties
      # @return [Array<[Number, nil], Boolean>] the variation index, or nil if there is an error
      # @raise [InvalidReferenceException]
      def self.variation_index_for_context: (untyped flag, untyped vr, untyped context) -> untyped

      # Returns a context's bucket value as a floating-point value in `[0, 1)`.
      #
      # @param context [LDContext] the context properties
      # @param context_kind [String, nil] the context kind to match against
      # @param key [String] the feature flag key (or segment key, if this is for a segment rule)
      # @param bucket_by [String|Symbol] the name of the context attribute to be used for bucketing
      # @param salt [String] the feature flag's or segment's salt value
      # @return [Float, nil] the bucket value, from 0 inclusive to 1 exclusive
      # @raise [InvalidReferenceException] Raised if the clause.attribute is an invalid reference
      def self.bucket_context: (untyped context, untyped context_kind, untyped key, untyped bucket_by, untyped salt, untyped seed) -> (nil | ::Float | untyped)

      private

      def self.bucketable_string_value: (untyped value) -> (untyped | nil)
    end
  end
end
