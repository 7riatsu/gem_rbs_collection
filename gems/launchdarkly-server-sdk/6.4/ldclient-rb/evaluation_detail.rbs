module LaunchDarkly
  # An object returned by {LDClient#variation_detail}, combining the result of a flag evaluation with
  # an explanation of how it was calculated.
  class EvaluationDetail
    # Creates a new instance.
    #
    # @param value the result value of the flag evaluation; may be of any type
    # @param variation_index [int|nil] the index of the value within the flag's list of variations, or
    #  `nil` if the application default value was returned
    # @param reason [EvaluationReason] an object describing the main factor that influenced the result
    # @raise [ArgumentError] if `variation_index` or `reason` is not of the correct type
    def initialize: (untyped value, Integer? variation_index, EvaluationReason reason) -> void

    #
    # The result of the flag evaluation. This will be either one of the flag's variations, or the
    # default value that was passed to {LDClient#variation_detail}. It is the same as the return
    # value of {LDClient#variation}.
    #
    # @return [Object]
    #
    attr_reader value: untyped

    #
    # The index of the returned value within the flag's list of variations. The first variation is
    # 0, the second is 1, etc. This is `nil` if the default value was returned.
    #
    # @return [int|nil]
    #
    attr_reader variation_index: Integer?

    #
    # An object describing the main factor that influenced the flag evaluation value.
    #
    # @return [EvaluationReason]
    #
    attr_reader reason: EvaluationReason

    #
    # Tests whether the flag evaluation returned a default value. This is the same as checking
    # whether {#variation_index} is nil.
    #
    # @return [Boolean]
    #
    def default_value?: () -> bool

    def ==: (untyped other) -> bool
  end

  # Describes the reason that a flag evaluation produced a particular value. This is returned by
  # methods such as {LDClient#variation_detail} as the `reason` property of an {EvaluationDetail}.
  #
  # The `kind` property is always defined, but other properties will have non-nil values only for
  # certain values of `kind`. All properties are immutable.
  #
  # There is a standard JSON representation of evaluation reasons when they appear in analytics events.
  # Use `as_json` or `to_json` to convert to this representation.
  #
  # Use factory methods such as {EvaluationReason#off} to obtain instances of this class.
  class EvaluationReason
    # Value for {#kind} indicating that the flag was off and therefore returned its configured off value.
    OFF: :OFF

    # Value for {#kind} indicating that the flag was on but the user did not match any targets or rules.
    FALLTHROUGH: :FALLTHROUGH

    # Value for {#kind} indicating that the user key was specifically targeted for this flag.
    TARGET_MATCH: :TARGET_MATCH

    # Value for {#kind} indicating that the user matched one of the flag's rules.
    RULE_MATCH: :RULE_MATCH

    # Value for {#kind} indicating that the flag was considered off because it had at least one
    # prerequisite flag that either was off or did not return the desired variation.
    PREREQUISITE_FAILED: :PREREQUISITE_FAILED

    # Value for {#kind} indicating that the flag could not be evaluated, e.g. because it does not exist
    # or due to an unexpected error. In this case the result value will be the application default value
    # that the caller passed to the client. Check {#error_kind} for more details on the problem.
    ERROR: :ERROR

    # Value for {#error_kind} indicating that the caller tried to evaluate a flag before the client had
    # successfully initialized.
    ERROR_CLIENT_NOT_READY: :CLIENT_NOT_READY

    # Value for {#error_kind} indicating that the caller provided a flag key that did not match any known flag.
    ERROR_FLAG_NOT_FOUND: :FLAG_NOT_FOUND

    # Value for {#error_kind} indicating that there was an internal inconsistency in the flag data, e.g.
    # a rule specified a nonexistent  variation. An error message will always be logged in this case.
    ERROR_MALFORMED_FLAG: :MALFORMED_FLAG

    # Value for {#error_kind} indicating that the caller passed `nil` for the user parameter, or the
    # user lacked a key.
    ERROR_USER_NOT_SPECIFIED: :USER_NOT_SPECIFIED

    # Value for {#error_kind} indicating that an unexpected exception stopped flag evaluation. An error
    # message will always be logged in this case.
    ERROR_EXCEPTION: :EXCEPTION

    # Indicates the general category of the reason. Will always be one of the class constants such
    # as {#OFF}.
    # @return [Symbol]
    attr_reader kind: Symbol

    # The index of the rule that was matched (0 for the first rule in the feature flag). If
    # {#kind} is not {#RULE_MATCH}, this will be `nil`.
    # @return [Integer|nil]
    attr_reader rule_index: Integer?

    # A unique string identifier for the matched rule, which will not change if other rules are added
    # or deleted. If {#kind} is not {#RULE_MATCH}, this will be `nil`.
    # @return [String]
    attr_reader rule_id: String

    # A boolean or nil value representing if the rule or fallthrough has an experiment rollout.
    # @return [Boolean|nil]
    attr_reader in_experiment: bool?

    # The key of the prerequisite flag that did not return the desired variation. If {#kind} is not
    # {#PREREQUISITE_FAILED}, this will be `nil`.
    # @return [String]
    attr_reader prerequisite_key: String?

    # A value indicating the general category of error. This should be one of the class constants such
    # as {#ERROR_FLAG_NOT_FOUND}. If {#kind} is not {#ERROR}, it will be `nil`.
    # @return [Symbol]
    attr_reader error_kind: Symbol?

    # Describes the validity of Big Segment information, if and only if the flag evaluation required
    # querying at least one Big Segment. Otherwise it returns `nil`. Possible values are defined by
    # {BigSegmentsStatus}.
    #
    # Big Segments are a specific kind of user segments. For more information, read the LaunchDarkly
    # documentation: https://docs.launchdarkly.com/home/users/big-segments
    # @return [Symbol]
    attr_reader big_segments_status: Symbol?

    # Returns an instance whose {#kind} is {#OFF}.
    # @return [EvaluationReason]
    def self.off: () -> EvaluationReason

    # Returns an instance whose {#kind} is {#FALLTHROUGH}.
    # @return [EvaluationReason]
    def self.fallthrough: (?bool in_experiment) -> EvaluationReason

    # Returns an instance whose {#kind} is {#TARGET_MATCH}.
    # @return [EvaluationReason]
    def self.target_match: () -> EvaluationReason

    # Returns an instance whose {#kind} is {#RULE_MATCH}.
    #
    # @param rule_index [Number] the index of the rule that was matched (0 for the first rule in
    #   the feature flag)
    # @param rule_id [String] unique string identifier for the matched rule
    # @return [EvaluationReason]
    # @raise [ArgumentError] if `rule_index` is not a number or `rule_id` is not a string
    def self.rule_match: (Integer rule_index, String rule_id, ?bool in_experiment) -> EvaluationReason

    # Returns an instance whose {#kind} is {#PREREQUISITE_FAILED}.
    #
    # @param prerequisite_key [String] key of the prerequisite flag that did not return the desired variation
    # @return [EvaluationReason]
    # @raise [ArgumentError] if `prerequisite_key` is nil or not a string
    def self.prerequisite_failed: (String prerequisite_key) -> EvaluationReason

    # Returns an instance whose {#kind} is {#ERROR}.
    #
    # @param error_kind [Symbol] value indicating the general category of error
    # @return [EvaluationReason]
    # @raise [ArgumentError] if `error_kind` is not a symbol
    def self.error: (Symbol error_kind) -> EvaluationReason

    def ==: (untyped other) -> bool

    # Equivalent to {#inspect}.
    # @return [String]
    def to_s: () -> String

    # Returns a concise string representation of the reason. Examples: `"FALLTHROUGH"`,
    # `"ERROR(FLAG_NOT_FOUND)"`. The exact syntax is not guaranteed to remain the same; this is meant
    # for debugging.
    # @return [String]
    def inspect: () -> String

    # Returns a hash that can be used as a JSON representation of the reason, in the format used
    # in LaunchDarkly analytics events.
    # @return [Hash]
    def as_json: (*untyped) -> Hash[Symbol, untyped]

    # Same as {#as_json}, but converts the JSON structure into a string.
    # @return [String]
    def to_json: (*untyped a) -> String

    # Allows this object to be treated as a hash corresponding to its JSON representation. For
    # instance, if `reason.kind` is {#RULE_MATCH}, then `reason[:kind]` will be `"RULE_MATCH"` and
    # `reason[:ruleIndex]` will be equal to `reason.rule_index`.
    def []: (Symbol key) -> untyped

    def with_big_segments_status: (BigSegmentsStatus big_segments_status) -> self

    #
    # Constructor that sets all properties. Applications should not normally use this constructor,
    # but should use class methods like {#off} to avoid creating unnecessary instances.
    #
    def initialize: (untyped kind, untyped rule_index, untyped rule_id, untyped prerequisite_key, untyped error_kind, ?untyped? in_experiment, ?untyped? big_segments_status) -> void

    def self.make_error: (untyped error_kind) -> EvaluationReason
  end

  #
  # Defines the possible values of {EvaluationReason#big_segments_status}.
  #
  module BigSegmentsStatus
    #
    # Indicates that the Big Segment query involved in the flag evaluation was successful, and
    # that the segment state is considered up to date.
    #
    HEALTHY: :HEALTHY

    #
    # Indicates that the Big Segment query involved in the flag evaluation was successful, but
    # that the segment state may not be up to date.
    #
    STALE: :STALE

    #
    # Indicates that Big Segments could not be queried for the flag evaluation because the SDK
    # configuration did not include a Big Segment store.
    #
    NOT_CONFIGURED: :NOT_CONFIGURED

    #
    # Indicates that the Big Segment query involved in the flag evaluation failed, for instance
    # due to a database error.
    #
    STORE_ERROR: :STORE_ERROR
  end
end
