#!/usr/bin/env ruby

require "pathname"
require "optparse"
require 'yaml'

@all = false
@verbose = false

OptionParser.new do |opts|
  opts.banner = "Usage: bin/test [options] <gem...>"

  opts.on("-a", "--all", "Test all gems") do @all = true end
  opts.on("-v", "--verbose", "Print more messages") do @verbose = true end
end.parse!(ARGV)

dirs =
  if @all
    Pathname(__dir__).glob("../gems/*/*").map {|dir| dir.relative_path_from(Dir.pwd) }
  else
    ARGV.map {|path| Pathname(path) }
  end

def putv(message)
  if @verbose
    message.each_line do |line|
      print "> #{line}"
    end
  end
end

def putci(message)
  puts message if ENV["CI"]
end

def sh!(*cmd, **options)
  putv "$ #{cmd.join(" ")}"
  system(*cmd, **options, exception: true)
end

def sh(*cmd, **options)
  putv "$ #{cmd.join(" ")}"
  system(*cmd, **options)
end

class Runner
  def initialize(base_dir)
    @base_dir = base_dir
    @test_dir = base_dir / "_test"
    @version = base_dir.basename.to_s
    @gem_name = base_dir.parent.basename.to_s
  end

  def run
    generate_gemfile_lock
    generate_rbs_collection_config
    rbs_collection_install
    remove_gemfile_lock

    generate_steepfile

    ok = true
    ok = run_rbs_validate && ok
    ok = run_steep_check && ok
    ok = check_untyped_call && ok
    ok
  end

  private

  attr_reader :base_dir, :test_dir, :version, :gem_name

  def generate_gemfile_lock
    v = "~> #{version}"
    test_dir.join('Gemfile').write(<<~RUBY)
      source 'https://rubygems.org'
      gem #{gem_name.dump}, #{v.dump}

      #{
        additional_gems.map {|name| "gem #{name.dump}" }.join("\n")
      }
    RUBY

    sh! 'bundle', 'lock', chdir: test_dir.to_s
  end

  def generate_rbs_collection_config
    test_dir.join('rbs_collection.yaml').write(<<~YAML)
      sources:
        - type: local
          path: #{Pathname(__dir__).join("../gems")}

      path: .gem_rbs_collection
    YAML
  end

  def remove_gemfile_lock
    test_dir.join('Gemfile.lock').delete
    test_dir.join('Gemfile').delete
  end

  def rbs_collection_install
    sh! 'rbs', 'collection', 'install', chdir: test_dir.to_s
  end

  def generate_steepfile
    test_dir.join("Steepfile").write(<<~RUBY)
      D = Steep::Diagnostic
      target :lib do
        check "."
        signature '.'

        configure_code_diagnostics(D::Ruby.all_error)
      end
    RUBY
  end

  def run_rbs_validate
    sh 'bundle', 'exec', 'rbs', 'validate', chdir: test_dir.to_s
  end

  def run_steep_check
    with_expectation = if test_dir.join('steep_expectations.yml').exist?
      ['--with-expectation']
    else
      []
    end
    sh 'bundle', 'exec', 'steep', 'check', *with_expectation, chdir: test_dir.to_s
  end

  def check_untyped_call
    sh Pathname(__dir__).join("check-untyped-call.rb").to_s, chdir: test_dir.to_s
  end

  def additional_gems
    path = test_dir.join('metadata.yaml')
    return [] unless path.exist?
    yaml = YAML.load path.read
    yaml['additional_gems'] || []
  end
end

failed_gems = []

dirs.each do |dir|
  putci "::group::Test for #{dir}"
  puts "Testing #{dir}..."

  test_dir = dir.join('_test')
  unless test_dir.exist?
    puts "Skipping: `#{test_dir}` is not found..."
    putci "::warning ::`#{test_dir}` is not found"
    next
  end

  ok = Runner.new(dir).run
  if ok
    puts " => Success ðŸ’ª"
  else
    puts " => Failure ðŸš¨"
    putci "::error ::`#{dir}` test failed"
    failed_gems << dir
  end

ensure
  putci "::endgroup::"
end

unless failed_gems.empty?
  puts ""
  puts "# Failed gems"
  failed_gems.each {|gem| puts gem }
  exit 1
end
